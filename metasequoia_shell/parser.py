"""
Auto generated by Metasequoia Parser
"""

import metasequoia_parser as ms_parser

from metasequoia_shell import ast



def h0(a,b,c):
    a.append(28)
    b.append(c.v)
    return s28,True

def h1(a,b,c):
    a.append(71)
    b.append(c.v)
    return s71,True

def h2(a,b,c):
    a.append(49)
    b.append(c.v)
    return s49,True

def h3(a,b,c):
    a.append(69)
    b.append(c.v)
    return s69,True

def h4(a,b,c):
    a.append(26)
    b.append(c.v)
    return s26,True

def h5(a,b,c):
    a.append(44)
    b.append(c.v)
    return s44,True

def h6(a,b,c):
    a.append(68)
    b.append(c.v)
    return s68,True

def h7(a,b,c):
    a.append(46)
    b.append(c.v)
    return s46,True

def h8(a,b,c):
    a.append(27)
    b.append(c.v)
    return s27,True

def h9(a,b,c):
    a.append(47)
    b.append(c.v)
    return s46,True

def ha(a,b,c):
    a.append(50)
    b.append(c.v)
    return s50,True

def hb(a,b,c):
    a.append(51)
    b.append(c.v)
    return s51,True

def hc(a,b,c):
    a.append(52)
    b.append(c.v)
    return s52,True

def hd(a,b,c):
    a.append(53)
    b.append(c.v)
    return s53,True

def he(a,b,c):
    a.append(54)
    b.append(c.v)
    return s54,True

def hf(a,b,c):
    a.append(55)
    b.append(c.v)
    return s55,True

def hg(a,b,c):
    a.append(56)
    b.append(c.v)
    return s56,True

def hh(a,b,c):
    a.append(57)
    b.append(c.v)
    return s57,True

def hi(a,b,c):
    a.append(58)
    b.append(c.v)
    return s58,True

def hj(a,b,c):
    a.append(59)
    b.append(c.v)
    return s59,True

def hk(a,b,c):
    a.append(60)
    b.append(c.v)
    return s60,True

def hl(a,b,c):
    a.append(61)
    b.append(c.v)
    return s61,True

def hm(a,b,c):
    a.append(62)
    b.append(c.v)
    return s62,True

def hn(a,b,c):
    a.append(63)
    b.append(c.v)
    return s63,True

def ho(a,b,c):
    a.append(64)
    b.append(c.v)
    return s64,True

def hp(a,b,c):
    a.append(65)
    b.append(c.v)
    return s65,True

def hq(a,b,c):
    a.append(66)
    b.append(c.v)
    return s66,True

def hr(a,b,c):
    a.append(48)
    b.append(c.v)
    return s48,True

def hs(a,b,c):
    a.append(67)
    b.append(c.v)
    return s26,True

def ht(a,b,c):
    a.append(24)
    b.append(c.v)
    return s24,True

def hu(a,b,c):
    a.append(45)
    b.append(c.v)
    return s24,True

def hv(a,b,c):
    a.append(25)
    b.append(c.v)
    return s25,True

def hw(a,b,c):
    a.append(70)
    b.append(c.v)
    return s70,True

def hx(a,b,c):
    a.append(72)
    b.append(c.v)
    return s72,True

def hy(a,b,c):
    a.append(12)
    b.append(c.v)
    return s12,True

def hz(a,b,c):
    a.append(11)
    b.append(c.v)
    return s11,True

def h10(a,b,c):
    a.append(9)
    b.append(c.v)
    return s9,True

def h11(a,b,c):
    a.append(10)
    b.append(c.v)
    return s9,True

def h12(a,b,c):
    a.append(13)
    b.append(c.v)
    return s13,True

def h13(a,b,c):
    a.append(15)
    b.append(c.v)
    return s15,True

def h14(a,b,c):
    a.append(14)
    b.append(c.v)
    return s13,True

def h15(a,b,c):
    a.append(16)
    b.append(c.v)
    return s13,True

def h16(a,b,c):
    a.append(78)
    b.append(c.v)
    return s78,True

def h17(a,b,c):
    a.append(79)
    b.append(c.v)
    return s79,True

def h18(a,b,c):
    a.append(84)
    b.append(c.v)
    return s84,True

def h19(a,b,c):
    a.append(85)
    b.append(c.v)
    return s85,True

def h1a(a,b,c):
    a.append(99)
    b.append(c.v)
    return s13,True

def h1b(a,b,c):
    a.append(100)
    b.append(c.v)
    return s13,True

def h1c(a,b,c):
    a.append(89)
    b.append(c.v)
    return s13,True

def h1d(a,b,c):
    a.append(90)
    b.append(c.v)
    return s13,True

def h1e(a,b,c):
    a.append(91)
    b.append(c.v)
    return s13,True

def h1f(a,b,c):
    a.append(92)
    b.append(c.v)
    return s13,True

def h1g(a,b,c):
    a.append(93)
    b.append(c.v)
    return s13,True

def h1h(a,b,c):
    a.append(94)
    b.append(c.v)
    return s13,True

def h1i(a,b,c):
    a.append(95)
    b.append(c.v)
    return s13,True

def h1j(a,b,c):
    a.append(96)
    b.append(c.v)
    return s13,True

def h1k(a,b,c):
    a.append(97)
    b.append(c.v)
    return s13,True

def h1l(a,b,c):
    a.append(98)
    b.append(c.v)
    return s13,True

def h1m(a,b,c):
    a.append(101)
    b.append(c.v)
    return s13,True

def h1n(a,b,c):
    a.append(102)
    b.append(c.v)
    return s13,True

def h1o(a,b,c):
    a.append(103)
    b.append(c.v)
    return s13,True

def h1p(a,b,c):
    a.append(104)
    b.append(c.v)
    return s13,True

def h1q(a,b,c):
    a.append(105)
    b.append(c.v)
    return s13,True

def h1r(a,b,c):
    a.append(106)
    b.append(c.v)
    return s13,True

def h1s(a,b,c):
    a.append(107)
    b.append(c.v)
    return s13,True

def h1t(a,b,c):
    a.append(108)
    b.append(c.v)
    return s13,True

def h1u(a,b,c):
    a.append(109)
    b.append(c.v)
    return s13,True

def h1v(a,b,c):
    a.append(110)
    b.append(c.v)
    return s13,True

def h1w(a,b,c):
    a.append(111)
    b.append(c.v)
    return s13,True

def h1x(a,b,c):
    a.append(115)
    b.append(c.v)
    return s24,True

def h1y(a,b,c):
    a.append(120)
    b.append(c.v)
    return s27,True

def h1z(a,b,c):
    a.append(123)
    b.append(c.v)
    return s123,True

def h20(a,b,c):
    a.append(129)
    b.append(c.v)
    return s129,True

def h21(a,b,c):
    a.append(128)
    b.append(c.v)
    return s128,True

def h22(a,b,c):
    a.append(135)
    b.append(c.v)
    return s135,True

def h23(a,b,c):
    a.append(136)
    b.append(c.v)
    return s136,True

def h24(a,b,c):
    a.append(139)
    b.append(c.v)
    return s139,True

def h25(a,b,c):
    a.append(140)
    b.append(c.v)
    return s140,True

def h26(a,b,c):
    a.append(141)
    b.append(c.v)
    return s141,True

def h27(a,b,c):
    a.append(142)
    b.append(c.v)
    return s142,True

def h28(a,b,c):
    a.append(144)
    b.append(c.v)
    return s144,True

def h29(a,b,c):
    a.append(146)
    b.append(c.v)
    return s146,True

def h2a(a,b,c):
    a.append(148)
    b.append(c.v)
    return s148,True

def h2b(a,b,c):
    a.append(149)
    b.append(c.v)
    return s149,True

def h2c(a,b,c):
    a.append(150)
    b.append(c.v)
    return s150,True

def h2d(a,b,c):
    a.append(179)
    b.append(c.v)
    return s179,True

def h2e(a,b,c):
    a.append(180)
    b.append(c.v)
    return s179,True

def h2f(a,b,c):
    a.append(182)
    b.append(c.v)
    return s13,True

def h2g(a,b,c):
    a.append(184)
    b.append(c.v)
    return s184,True

def h2h(a,b,c):
    a.append(185)
    b.append(c.v)
    return s13,True

def h2i(a,b,c):
    a.append(186)
    b.append(c.v)
    return s186,True

def h2j(a,b,c):
    a.append(187)
    b.append(c.v)
    return s13,True

def h2k(a,b,c):
    a.append(188)
    b.append(c.v)
    return s188,True

def h2l(a,b,c):
    a.append(190)
    b.append(c.v)
    return s190,True

def h2m(a,b,c):
    a.append(191)
    b.append(c.v)
    return s191,True

def h2n(a,b,c):
    a.append(192)
    b.append(c.v)
    return s192,True

def h2o(a,b,c):
    a.append(193)
    b.append(c.v)
    return s193,True

def h2p(a,b,c):
    a.append(194)
    b.append(c.v)
    return s194,True

def h2q(a,b,c):
    a.append(195)
    b.append(c.v)
    return s195,True

def h2r(a,b,c):
    a.append(197)
    b.append(c.v)
    return s197,True

def h2s(a,b,c):
    a.append(196)
    b.append(c.v)
    return s196,True

def h2t(a,b,c):
    a.append(200)
    b.append(c.v)
    return s13,True

def h2u(a,b,c):
    a.append(201)
    b.append(c.v)
    return s201,True

def h2v(a,b,c):
    a.append(202)
    b.append(c.v)
    return s46,True

def h2w(a,b,c):
    a.append(203)
    b.append(c.v)
    return s203,True

def h2x(a,b,c):
    a.append(205)
    b.append(c.v)
    return s205,True

def h2y(a,b,c):
    a.append(206)
    b.append(c.v)
    return s206,True

def h2z(a,b,c):
    a.append(207)
    b.append(c.v)
    return s207,True

def h30(a,b,c):
    a.append(208)
    b.append(c.v)
    return s208,True

def h31(a,b,c):
    a.append(209)
    b.append(c.v)
    return s209,True

def h32(a,b,c):
    a.append(210)
    b.append(c.v)
    return s210,True

def h33(a,b,c):
    a.append(213)
    b.append(c.v)
    return s179,True

def h34(a,b,c):
    a.append(215)
    b.append(c.v)
    return s215,True

def h35(a,b,c):
    a.append(221)
    b.append(c.v)
    return s179,True

def h36(a,b,c):
    a.append(223)
    b.append(c.v)
    return s27,True

def h37(a,b,c):
    a.append(224)
    b.append(c.v)
    return s224,True

def h38(a,b,c):
    a.append(225)
    b.append(c.v)
    return s225,True

def h39(a,b,c):
    a.append(226)
    b.append(c.v)
    return s226,True

def h3a(a,b,c):
    a.append(227)
    b.append(c.v)
    return s227,True

def h3b(a,b,c):
    a.append(228)
    b.append(c.v)
    return s228,True

def h3c(a,b,c):
    a.append(229)
    b.append(c.v)
    return s229,True

def h3d(a,b,c):
    a.append(233)
    b.append(c.v)
    return s46,True

def h3e(a,b,c):
    a.append(232)
    b.append(c.v)
    return s232,True

def h3f(a,b,c):
    a.append(234)
    b.append(c.v)
    return s234,True

def h3g(a,b,c):
    a.append(235)
    b.append(c.v)
    return s235,True

def h3h(a,b,c):
    a.append(238)
    b.append(c.v)
    return s238,True

def h3i(a,b,c):
    a.append(243)
    b.append(c.v)
    return s12,True

def h3j(a,b,c):
    a.append(240)
    b.append(c.v)
    return s240,True

def h3k(a,b,c):
    a.append(241)
    b.append(c.v)
    return s241,True

def h3l(a,b,c):
    a.append(245)
    b.append(c.v)
    return s245,True

def h3m(a,b,c):
    a.append(246)
    b.append(c.v)
    return s246,True

def h3n(a,b,c):
    a.append(249)
    b.append(c.v)
    return s13,True

def h3o(a,b,c):
    a.append(251)
    b.append(c.v)
    return s251,True

def h3p(a,b,c):
    a.append(253)
    b.append(c.v)
    return s253,True

def h3q(a,b,c):
    a.append(254)
    b.append(c.v)
    return s254,True

def h3r(a,b,c):
    a.append(255)
    b.append(c.v)
    return s255,True

def h3s(a,b,c):
    a.append(256)
    b.append(c.v)
    return s256,True

def h3t(a,b,c):
    a.append(257)
    b.append(c.v)
    return s257,True

def h3u(a,b,c):
    a.append(259)
    b.append(c.v)
    return s259,True

def h3v(a,b,c):
    a.append(260)
    b.append(c.v)
    return s179,True

def h3w(a,b,c):
    a.append(261)
    b.append(c.v)
    return s179,True

def h3x(a,b,c):
    a.append(263)
    b.append(c.v)
    return s240,True

def h3y(a,b,c):
    a.append(264)
    b.append(c.v)
    return s264,True

def h3z(a,b,c):
    a.append(270)
    b.append(c.v)
    return s270,True

def h40(a,b,c):
    a.append(271)
    b.append(c.v)
    return s179,True

def h41(a,b,c):
    a.append(272)
    b.append(c.v)
    return s272,True

def h42(a,b,c):
    a.append(273)
    b.append(c.v)
    return s273,True

def h43(a,b,c):
    a.append(274)
    b.append(c.v)
    return s274,True

def h44(a,b,c):
    a.append(275)
    b.append(c.v)
    return s27,True

def h45(a,b,c):
    a.append(276)
    b.append(c.v)
    return s276,True

def h46(a,b,c):
    a.append(278)
    b.append(c.v)
    return s46,True

def h47(a,b,c):
    a.append(277)
    b.append(c.v)
    return s277,True

def h48(a,b,c):
    a.append(282)
    b.append(c.v)
    return s282,True

def h49(a,b,c):
    a.append(283)
    b.append(c.v)
    return s184,True

def h4a(a,b,c):
    a.append(285)
    b.append(c.v)
    return s285,True

def h4b(a,b,c):
    a.append(286)
    b.append(c.v)
    return s27,True

def h4c(a,b,c):
    a.append(287)
    b.append(c.v)
    return s27,True

def h4d(a,b,c):
    a.append(290)
    b.append(c.v)
    return s290,True

def h4e(a,b,c):
    a.append(291)
    b.append(c.v)
    return s291,True

def h4f(a,b,c):
    a.append(292)
    b.append(c.v)
    return s292,True

def h4g(a,b,c):
    a.append(294)
    b.append(c.v)
    return s294,True

def h4h(a,b,c):
    a.append(295)
    b.append(c.v)
    return s27,True

def h4i(a,b,c):
    a.append(298)
    b.append(c.v)
    return s298,True

def h4j(a,b,c):
    a.append(299)
    b.append(c.v)
    return s299,True

def h4k(a,b,c):
    a.append(301)
    b.append(c.v)
    return s301,True

def h4l(a,b,c):
    a.append(302)
    b.append(c.v)
    return s302,True

def h4m(a,b,c):
    a.append(303)
    b.append(c.v)
    return s303,True
def r0(a,b,_):
    v = None
    n,k=R0[a[-1]]
    b.append(v)
    a.append(n)
    return k,False



E0={0}

def r1(a,b,_):
    v = b[-1]
    assert a[-2] in E0
    b[-1:]=[v]
    a[-1:]=[1]
    return s1,False
def r2(a,b,_):
    v = ast.Script(command_list=b[-1])
    n,k=R0[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False



E1={0,9,10,12,24,25,26,27,45,67,68,115,120,128,179,180,184,213,221,223,240,243,246,260,261,263,271,275,283,286,287,295}

def r3(a,b,_):
    v = [b[-1]]
    assert a[-2] in E1
    b[-1:]=[v]
    a[-1:]=[3]
    return s3,False

E2={5}

def r4(a,b,_):
    v = None
    assert a[-1] in E2
    b.append(v)
    a.append(74)
    return s74,False

E3={6}

def r5(a,b,_):
    v = None
    assert a[-1] in E3
    b.append(v)
    a.append(80)
    return s80,False

E4={7}

def r6(a,b,_):
    v = None
    assert a[-1] in E4
    b.append(v)
    a.append(86)
    return s86,False

E5={0,3,9,10,12,24,25,26,27,45,67,68,77,83,115,120,128,179,180,184,213,221,223,240,243,246,260,261,263,271,275,283,286,287,295}

def r7(a,b,_):
    v = ast.SimpleCommand(word_list=b[-1])
    assert a[-2] in E5
    b[-1:]=[v]
    a[-1:]=[7]
    return s7,False
def r8(a,b,_):
    v = [b[-1]]
    n,k=R1[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False


def r9(a,b,_):
    v = b[-1]
    n,k=R2[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False



E6={0,3,9,10,11,12,13,14,15,16,24,25,26,27,45,67,68,77,83,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,120,128,179,180,182,184,185,187,200,213,217,221,223,240,243,246,249,260,261,263,271,275,283,286,287,295}

def ra(a,b,_):
    v = ast.NormalWord(element_list=b[-1])
    assert a[-2] in E6
    b[-1:]=[v]
    a[-1:]=[18]
    return s18,False

E7={0,3,9,10,11,12,13,14,15,16,23,24,25,26,27,45,46,47,67,68,71,72,77,83,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,120,128,129,133,134,143,145,179,180,182,184,185,187,199,200,202,204,213,217,221,223,233,240,243,246,249,260,261,263,271,275,278,283,286,287,295}

def rb(a,b,_):
    v = ast.Ident(string=b[-1])
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[30]
    return s30,False
def rc(a,b,_):
    v = [b[-1]]
    n,k=R3[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False


def rd(a,b,_):
    v = b[-1]
    n,k=R4[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False



def re(a,b,_):
    v = ast.Ident(string='=')
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[30]
    return s30,False

E8={48}

def rf(a,b,_):
    v = False
    assert a[-1] in E8
    b.append(v)
    a.append(134)
    return s46,False

def rg(a,b,_):
    v = ast.Param0()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rh(a,b,_):
    v = ast.Param1()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def ri(a,b,_):
    v = ast.Param2()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rj(a,b,_):
    v = ast.Param3()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rk(a,b,_):
    v = ast.Param4()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rl(a,b,_):
    v = ast.Param5()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rm(a,b,_):
    v = ast.Param6()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rn(a,b,_):
    v = ast.Param7()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def ro(a,b,_):
    v = ast.Param8()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rp(a,b,_):
    v = ast.Param9()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rq(a,b,_):
    v = ast.ParamExclamation()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rr(a,b,_):
    v = ast.ParamPound()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rs(a,b,_):
    v = ast.ParamStar()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rt(a,b,_):
    v = ast.ParamHyphen()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def ru(a,b,_):
    v = ast.ParamQuestion()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rv(a,b,_):
    v = ast.ParamAt()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rw(a,b,_):
    v = ast.ParamDollar()
    assert a[-2] in E7
    b[-1:]=[v]
    a[-1:]=[38]
    return s30,False

def rx(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in E1
    b[-2:]=[v]
    a[-2:]=[3]
    return s3,False

def ry(a,b,_):
    v = b[-1]
    assert a[-2] in E2
    b[-1:]=[v]
    a[-1:]=[74]
    return s74,False

def rz(a,b,_):
    v = [b[-1]]
    assert a[-2] in E2
    b[-1:]=[v]
    a[-1:]=[75]
    return s75,False

E9={5,75}

def r10(a,b,_):
    v = ast.CommandRelationType.ASCII_0x26_0x26
    assert a[-2] in E9
    b[-1:]=[v]
    a[-1:]=[77]
    return s77,False

def r11(a,b,_):
    v = ast.CommandRelationType.ASCII_0x7C_0x7C
    assert a[-2] in E9
    b[-1:]=[v]
    a[-1:]=[77]
    return s77,False
def r12(a,b,_):
    v = ast.CommandWithPipe.create(command=b[-2], pipe_list=b[-1])
    n,k=R5[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



def r13(a,b,_):
    v = b[-1]
    assert a[-2] in E3
    b[-1:]=[v]
    a[-1:]=[80]
    return s80,False

def r14(a,b,_):
    v = [b[-1]]
    assert a[-2] in E3
    b[-1:]=[v]
    a[-1:]=[81]
    return s81,False

Ea={6,81}

def r15(a,b,_):
    v = ast.PipeType.ASCII_0x7C
    assert a[-2] in Ea
    b[-1:]=[v]
    a[-1:]=[83]
    return s77,False

def r16(a,b,_):
    v = ast.PipeType.ASCII_0x7C_0x26
    assert a[-2] in Ea
    b[-1:]=[v]
    a[-1:]=[83]
    return s77,False
def r17(a,b,_):
    v = ast.CommandWithRedirection.create(bare_command=b[-2], redirection_list=b[-1])
    n,k=R6[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



def r18(a,b,_):
    v = b[-1]
    assert a[-2] in E4
    b[-1:]=[v]
    a[-1:]=[86]
    return s86,False

def r19(a,b,_):
    v = [b[-1]]
    assert a[-2] in E4
    b[-1:]=[v]
    a[-1:]=[87]
    return s87,False
def r1a(a,b,_):
    v = b[-2] + [b[-1]]
    n,k=R3[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



Eb={46}

def r1b(a,b,_):
    v = [b[-1]]
    assert a[-2] in Eb
    b[-1:]=[v]
    a[-1:]=[131]
    return s131,False

def r1c(a,b,_):
    v = ast.TildeExpansion(element_list=b[-1])
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[36]
    return s30,False

def r1d(a,b,_):
    v = True
    assert a[-2] in E8
    b[-1:]=[v]
    a[-1:]=[134]
    return s46,False

def r1e(a,b,_):
    v = ast.ParamExpansion(name=b[-1])
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[37]
    return s30,False

def r1f(a,b,_):
    v = ast.SingleQuoteString(string=None)
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[40]
    return s30,False

def r1g(a,b,_):
    v = ast.DollarSingleQuoteString.create(string=None)
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[41]
    return s30,False

def r1h(a,b,_):
    v = ast.DoubleQuoteString(element_list=None)
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[42]
    return s30,False

def r1i(a,b,_):
    v = ast.DollarDoubleQuoteString(element_list=None)
    assert a[-3] in E7
    b[-2:]=[v]
    a[-2:]=[43]
    return s30,False
def r1j(a,b,_):
    v = ast.CommandWithList.create(first_command=b[-3], other_command_list=b[-2], end_type=b[-1])
    n,k=R7[a[-4]]
    b[-3:]=[v]
    a[-3:]=[n]
    return k,False


def r1k(a,b,_):
    v = ast.CommandEndType.ASCII_0x0A
    n,k=R8[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False


def r1l(a,b,_):
    v = ast.CommandEndType.ASCII_0x26
    n,k=R8[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False


def r1m(a,b,_):
    v = ast.CommandEndType.ASCII_0x3B
    n,k=R8[a[-2]]
    b[-1:]=[v]
    a[-1:]=[n]
    return k,False



def r1n(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in E2
    b[-2:]=[v]
    a[-2:]=[75]
    return s75,False
def r1o(a,b,_):
    v = ast.CommandWithRelation(relation=b[-2], command=b[-1])
    n,k=R9[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



def r1p(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in E3
    b[-2:]=[v]
    a[-2:]=[81]
    return s81,False
def r1q(a,b,_):
    v = ast.Pipe(type=b[-2], command=b[-1])
    n,k=Ra[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



def r1r(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in E4
    b[-2:]=[v]
    a[-2:]=[87]
    return s87,False
def r1s(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1t(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C_0x26, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1u(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C_0x3C, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1v(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C_0x3E, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1w(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C_0x3C_0x2D, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1x(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3C_0x3C_0x3C, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1y(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3E, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r1z(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3E_0x7C, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r20(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3E_0x3E, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r21(a,b,_):
    v = ast.Redirection.create_number_redirection(rtype=ast.RedirectionType.NUMBER_0x3E_0x26, number=int(b[-2][0]), word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r22(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r23(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3E, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r24(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3E_0x7C, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r25(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3E_0x3E, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r26(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x26_0x3E, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r27(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3E_0x26, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r28(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x26_0x3E_0x3E, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r29(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C_0x3C, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r2a(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C_0x3C_0x2D, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r2b(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C_0x3C_0x3C, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r2c(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C_0x26, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r2d(a,b,_):
    v = ast.Redirection.create_redirection(rtype=ast.RedirectionType.ASCII_0x3C_0x3E, word_list=b[-1])
    n,k=Rb[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False


def r2e(a,b,_):
    v = b[-3] + [b[-1]]
    n,k=R1[a[-4]]
    b[-3:]=[v]
    a[-3:]=[n]
    return k,False



def r2f(a,b,_):
    v = ast.ArithmeticExpression(script=b[-2])
    assert a[-4] in E6
    b[-3:]=[v]
    a[-3:]=[19]
    return s18,False

def r2g(a,b,_):
    v = ast.ConditionalExpression(script=b[-2])
    assert a[-4] in E6
    b[-3:]=[v]
    a[-3:]=[20]
    return s18,False

def r2h(a,b,_):
    v = ast.GroupingCommand.create_sub_process(script=b[-2])
    assert a[-4] in E6
    b[-3:]=[v]
    a[-3:]=[21]
    return s18,False

def r2i(a,b,_):
    v = ast.GroupingCommand.create_context(script=b[-2])
    assert a[-4] in E6
    b[-3:]=[v]
    a[-3:]=[21]
    return s18,False

def r2j(a,b,_):
    v = ast.Assignment(name=b[-3], value_element_list=b[-1])
    assert a[-4] in E6
    b[-3:]=[v]
    a[-3:]=[22]
    return s18,False

def r2k(a,b,_):
    v = ast.ArithmeticExpansion(script=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[34]
    return s30,False

def r2l(a,b,_):
    v = ast.BraceExpansion(element_list=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[35]
    return s30,False

def r2m(a,b,_):
    v = ast.CommandSubstitution.create_curve(b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[39]
    return s30,False

def r2n(a,b,_):
    v = ast.CommandSubstitution.create_back_quote(b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[39]
    return s30,False

def r2o(a,b,_):
    v = ast.SingleQuoteString(string=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[40]
    return s30,False

def r2p(a,b,_):
    v = ast.DollarSingleQuoteString.create(string=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[41]
    return s30,False

def r2q(a,b,_):
    v = ast.DoubleQuoteString(element_list=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[42]
    return s30,False

def r2r(a,b,_):
    v = ast.DollarDoubleQuoteString(element_list=b[-2])
    assert a[-4] in E7
    b[-3:]=[v]
    a[-3:]=[43]
    return s30,False

Ec={185}

def r2s(a,b,_):
    v = [b[-1]]
    assert a[-2] in Ec
    b[-1:]=[v]
    a[-1:]=[217]
    return s217,False

Ed={185,217}

def r2t(a,b,_):
    v = [b[-1]]
    assert a[-2] in Ed
    b[-1:]=[v]
    a[-1:]=[219]
    return s219,False

def r2u(a,b,_):
    v = ast.Coprocess(name=None, script=b[-2])
    assert a[-5] in E5
    b[-4:]=[v]
    a[-4:]=[7]
    return s7,False

def r2v(a,b,_):
    v = ast.ArrayGetter(array=b[-4], script=b[-2])
    assert a[-5] in E7
    b[-4:]=[v]
    a[-4:]=[33]
    return s30,False

def r2w(a,b,_):
    v = b[-3] + [b[-1]]
    assert a[-4] in Eb
    b[-3:]=[v]
    a[-3:]=[131]
    return s131,False

def r2x(a,b,_):
    v = ast.BraceParamExpansion(element_list=b[-2], indirect=b[-3])
    assert a[-5] in E7
    b[-4:]=[v]
    a[-4:]=[37]
    return s30,False

def r2y(a,b,_):
    v = ast.UntilCommand(test_script=b[-4], consequent_script=b[-2])
    assert a[-6] in E5
    b[-5:]=[v]
    a[-5:]=[7]
    return s7,False

def r2z(a,b,_):
    v = ast.WhileCommand(test_script=b[-4], consequent_script=b[-2])
    assert a[-6] in E5
    b[-5:]=[v]
    a[-5:]=[7]
    return s7,False

def r30(a,b,_):
    v = ast.IfCommand(test_script=b[-4], consequent_script=b[-2], else_if_list=[], alternate_script=None)
    assert a[-6] in E5
    b[-5:]=[v]
    a[-5:]=[7]
    return s7,False

Ee={216}

def r31(a,b,_):
    v = [b[-1]]
    assert a[-2] in Ee
    b[-1:]=[v]
    a[-1:]=[239]
    return s239,False

def r32(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in Ec
    b[-2:]=[v]
    a[-2:]=[217]
    return s217,False

def r33(a,b,_):
    v = ast.CaseCommand(word=b[-4], item_list=b[-2])
    assert a[-6] in E5
    b[-5:]=[v]
    a[-5:]=[7]
    return s7,False

def r34(a,b,_):
    v = [b[-2]] + b[-1]
    assert a[-3] in Ed
    b[-2:]=[v]
    a[-2:]=[219]
    return s219,False

Ef={220}

def r35(a,b,_):
    v = [b[-1]]
    assert a[-2] in Ef
    b[-1:]=[v]
    a[-1:]=[247]
    return s247,False

def r36(a,b,_):
    v = ast.ArrayAt(array=b[-5])
    assert a[-6] in E7
    b[-5:]=[v]
    a[-5:]=[31]
    return s30,False

def r37(a,b,_):
    v = ast.ArrayStar(array=b[-5])
    assert a[-6] in E7
    b[-5:]=[v]
    a[-5:]=[32]
    return s30,False

def r38(a,b,_):
    v = ast.EnhanceForCommand(name=b[-5], script=b[-2])
    assert a[-7] in E5
    b[-6:]=[v]
    a[-6:]=[7]
    return s7,False

def r39(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in Ee
    b[-2:]=[v]
    a[-2:]=[239]
    return s239,False

def r3a(a,b,_):
    v = ast.IfCommand(test_script=b[-5], consequent_script=b[-3], else_if_list=b[-2], alternate_script=None)
    assert a[-7] in E5
    b[-6:]=[v]
    a[-6:]=[7]
    return s7,False
def r3b(a,b,_):
    v = ast.CaseItem(pattern_list=b[-3], script=b[-1])
    n,k=Rc[a[-4]]
    b[-3:]=[v]
    a[-3:]=[n]
    return k,False



def r3c(a,b,_):
    v = b[-2] + [b[-1]]
    assert a[-3] in Ef
    b[-2:]=[v]
    a[-2:]=[247]
    return s247,False
def r3d(a,b,_):
    v = b[-1]
    n,k=Rd[a[-3]]
    b[-2:]=[v]
    a[-2:]=[n]
    return k,False



def r3e(a,b,_):
    v = ast.SelectCommand(name=b[-5], word_list=None, script=b[-2])
    assert a[-7] in E5
    b[-6:]=[v]
    a[-6:]=[7]
    return s7,False

def r3f(a,b,_):
    v = ast.Coprocess(name=b[-5], script=b[-2])
    assert a[-7] in E5
    b[-6:]=[v]
    a[-6:]=[7]
    return s7,False

def r3g(a,b,_):
    v = ast.AssignmentArray(name=b[-6], value_element_list=b[-3])
    assert a[-7] in E6
    b[-6:]=[v]
    a[-6:]=[22]
    return s18,False

def r3h(a,b,_):
    v = ast.BraceParamExpansion(element_list=b[-4], indirect=b[-5], offset=b[-2])
    assert a[-7] in E7
    b[-6:]=[v]
    a[-6:]=[37]
    return s30,False

def r3i(a,b,_):
    v = ast.IfCommand(test_script=b[-6], consequent_script=b[-4], else_if_list=[], alternate_script=b[-2])
    assert a[-8] in E5
    b[-7:]=[v]
    a[-7:]=[7]
    return s7,False

def r3j(a,b,_):
    v = ast.EnhanceForCommand(name=b[-7], word_list=b[-5], script=b[-2])
    assert a[-9] in E5
    b[-8:]=[v]
    a[-8:]=[7]
    return s7,False

def r3k(a,b,_):
    v = ast.ForCommand(test_script=b[-6], consequent_script=b[-2])
    assert a[-9] in E5
    b[-8:]=[v]
    a[-8:]=[7]
    return s7,False

def r3l(a,b,_):
    v = ast.IfCommand(test_script=b[-7], consequent_script=b[-5], else_if_list=b[-4], alternate_script=b[-2])
    assert a[-9] in E5
    b[-8:]=[v]
    a[-8:]=[7]
    return s7,False
def r3m(a,b,_):
    v = ast.ElifItem(test_script=b[-3], consequent_script=b[-1])
    n,k=Re[a[-5]]
    b[-4:]=[v]
    a[-4:]=[n]
    return k,False



def r3n(a,b,_):
    v = ast.SelectCommand(name=b[-7], word_list=b[-5], script=b[-2])
    assert a[-9] in E5
    b[-8:]=[v]
    a[-8:]=[7]
    return s7,False

def r3o(a,b,_):
    v = ast.Function(name=b[-7], script=b[-2])
    assert a[-9] in E5
    b[-8:]=[v]
    a[-8:]=[7]
    return s7,False

def r3p(a,b,_):
    v = ast.BraceParamExpansion(element_list=b[-6], indirect=b[-7], offset=b[-4], length=b[-2])
    assert a[-9] in E7
    b[-8:]=[v]
    a[-8:]=[37]
    return s30,False

def r3q(a,b,_):
    v = ast.Function(name=b[-8], script=b[-2])
    assert a[-10] in E5
    b[-9:]=[v]
    a[-9:]=[7]
    return s7,False

def r3r(a,b,_):
    v = ast.Function(name=b[-8], script=b[-2])
    assert a[-10] in E5
    b[-9:]=[v]
    a[-9:]=[7]
    return s7,False

def r3s(a,b,_):
    v = ast.Function(name=b[-9], script=b[-2])
    assert a[-11] in E5
    b[-10:]=[v]
    a[-10:]=[7]
    return s7,False
def p(a,b,c):
    return None,True


SH0={0:r0,1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s0(a,b,c):
    m=SH0[c.i]
    return m(a,b,c)


def s1(a,b,c):
    assert c.i==0
    return p(a,b,c)


def s2(a,b,c):
    assert c.i==0
    return r1(a,b,c)


SH3={1:h0,8:h2,11:h3,21:h5,69:hw,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}

Eg={0,5,12,13,25,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,62,63,64,65,66,70,95,96,97,98,104,105,107}
SH3.update({v:r2 for v in Eg})


def s3(a,b,c):
    m=SH3[c.i]
    return m(a,b,c)



Eh={0,1,5,8,11,12,13,21,25,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,62,63,64,65,66,69,70,94,95,96,97,98,100,102,103,104,105,106,107,108,109,110}
def s4(a,b,c):
    assert c.i in Eh
    return r3(a,b,c)


SH5={72:h16,73:h17,}

Ei={2,10,19}
SH5.update({v:r4 for v in Ei})


def s5(a,b,c):
    m=SH5[c.i]
    return m(a,b,c)


SH6={31:h18,71:h19,}

Ej={2,10,19,72,73}
SH6.update({v:r5 for v in Ej})


def s6(a,b,c):
    m=SH6[c.i]
    return m(a,b,c)


SH7={2:r6,10:r6,19:r6,20:h1a,22:h1b,31:r6,71:r6,72:r6,73:r6,74:h1c,75:h1d,76:h1e,77:h1f,78:h1g,79:h1h,80:h1i,81:h1j,82:h1k,83:h1l,84:h1m,85:h1n,86:h1o,87:h1p,88:h1q,89:h1r,90:h1s,91:h1t,92:h1u,93:h1v,}


def s7(a,b,c):
    m=SH7[c.i]
    return m(a,b,c)


SH8={3:h1w,}

Ek={2,10,19,20,22,31,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93}
SH8.update({v:r7 for v in Ek})


def s8(a,b,c):
    m=SH8[c.i]
    return m(a,b,c)


SH9={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,104:r0,106:h12,108:h13,109:h14,110:h15,}


def s9(a,b,c):
    m=SH9[c.i]
    return m(a,b,c)


SH11={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:h1x,64:hu,65:hv,69:hw,70:hx,}


def s11(a,b,c):
    m=SH11[c.i]
    return m(a,b,c)


SH12={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,95:r0,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s12(a,b,c):
    m=SH12[c.i]
    return m(a,b,c)


SH13={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,}


def s13(a,b,c):
    m=SH13[c.i]
    return m(a,b,c)


SH15={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h1y,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,}


def s15(a,b,c):
    m=SH15[c.i]
    return m(a,b,c)



El={2,3,10,19,20,22,31,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93}
def s17(a,b,c):
    assert c.i in El
    return r8(a,b,c)



Em={2,3,10,12,19,20,22,31,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101}
def s18(a,b,c):
    assert c.i in Em
    return r9(a,b,c)


SH23={1:h1z,5:h1,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}
SH23.update({v:ra for v in Em})


def s23(a,b,c):
    m=SH23[c.i]
    return m(a,b,c)


SH24={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,63:r0,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s24(a,b,c):
    m=SH24[c.i]
    return m(a,b,c)


SH25={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,66:r0,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s25(a,b,c):
    m=SH25[c.i]
    return m(a,b,c)


SH26={1:h0,5:h1,8:h2,11:h3,12:h4,13:r0,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s26(a,b,c):
    m=SH26[c.i]
    return m(a,b,c)


SH27={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,33:r0,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s27(a,b,c):
    m=SH27[c.i]
    return m(a,b,c)


SH28={21:h20,24:h21,}

En={1,2,3,5,8,10,11,12,19,20,22,27,29,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101}
SH28.update({v:rb for v in En})


def s28(a,b,c):
    m=SH28[c.i]
    return m(a,b,c)



Eo={1,2,3,5,6,8,10,11,12,15,18,19,20,21,22,27,29,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,64,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101}
def s29(a,b,c):
    assert c.i in Eo
    return rc(a,b,c)


def s30(a,b,c):
    assert c.i in Eo
    return rd(a,b,c)


def s44(a,b,c):
    assert c.i in Eo
    return re(a,b,c)


SH46={1:h1z,5:h1,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s46(a,b,c):
    m=SH46[c.i]
    return m(a,b,c)


SH48={4:h22,}

Ep={1,5,8,11,21,27,29,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,64,69,70}
SH48.update({v:rf for v in Ep})


def s48(a,b,c):
    m=SH48[c.i]
    return m(a,b,c)


def s49(a,b,c):
    assert c.i==1
    return h23(a,b,c)


def s50(a,b,c):
    assert c.i in Eo
    return rg(a,b,c)


def s51(a,b,c):
    assert c.i in Eo
    return rh(a,b,c)


def s52(a,b,c):
    assert c.i in Eo
    return ri(a,b,c)


def s53(a,b,c):
    assert c.i in Eo
    return rj(a,b,c)


def s54(a,b,c):
    assert c.i in Eo
    return rk(a,b,c)


def s55(a,b,c):
    assert c.i in Eo
    return rl(a,b,c)


def s56(a,b,c):
    assert c.i in Eo
    return rm(a,b,c)


def s57(a,b,c):
    assert c.i in Eo
    return rn(a,b,c)


def s58(a,b,c):
    assert c.i in Eo
    return ro(a,b,c)


def s59(a,b,c):
    assert c.i in Eo
    return rp(a,b,c)


def s60(a,b,c):
    assert c.i in Eo
    return rq(a,b,c)


def s61(a,b,c):
    assert c.i in Eo
    return rr(a,b,c)


def s62(a,b,c):
    assert c.i in Eo
    return rs(a,b,c)


def s63(a,b,c):
    assert c.i in Eo
    return rt(a,b,c)


def s64(a,b,c):
    assert c.i in Eo
    return ru(a,b,c)


def s65(a,b,c):
    assert c.i in Eo
    return rv(a,b,c)


def s66(a,b,c):
    assert c.i in Eo
    return rw(a,b,c)


SH68={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,28:r0,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s68(a,b,c):
    m=SH68[c.i]
    return m(a,b,c)


SH69={1:h24,11:h25,}


def s69(a,b,c):
    m=SH69[c.i]
    return m(a,b,c)


SH70={1:h26,11:h27,}


def s70(a,b,c):
    m=SH70[c.i]
    return m(a,b,c)


SH71={1:h1z,5:h1,6:h28,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s71(a,b,c):
    m=SH71[c.i]
    return m(a,b,c)


SH72={1:h1z,5:h1,6:h29,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s72(a,b,c):
    m=SH72[c.i]
    return m(a,b,c)


def s73(a,b,c):
    assert c.i in Eh
    return rx(a,b,c)


SH74={2:h2a,10:h2b,19:h2c,}


def s74(a,b,c):
    m=SH74[c.i]
    return m(a,b,c)


SH75={72:h16,73:h17,}
SH75.update({v:ry for v in Ei})


def s75(a,b,c):
    m=SH75[c.i]
    return m(a,b,c)


def s76(a,b,c):
    assert c.i in Ej
    return rz(a,b,c)


SH77={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s77(a,b,c):
    m=SH77[c.i]
    return m(a,b,c)



Eq={1,5,8,11,12,21,27,29,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,62,64,65,69,70,94,100,102,103,106,108,109,110}
def s78(a,b,c):
    assert c.i in Eq
    return r10(a,b,c)


def s79(a,b,c):
    assert c.i in Eq
    return r11(a,b,c)


def s80(a,b,c):
    assert c.i in Ej
    return r12(a,b,c)


SH81={31:h18,71:h19,}
SH81.update({v:r13 for v in Ej})


def s81(a,b,c):
    m=SH81[c.i]
    return m(a,b,c)



Er={2,10,19,31,71,72,73}
def s82(a,b,c):
    assert c.i in Er
    return r14(a,b,c)


def s84(a,b,c):
    assert c.i in Eq
    return r15(a,b,c)


def s85(a,b,c):
    assert c.i in Eq
    return r16(a,b,c)


def s86(a,b,c):
    assert c.i in Er
    return r17(a,b,c)


SH87={2:r18,10:r18,19:r18,20:h1a,22:h1b,31:r18,71:r18,72:r18,73:r18,74:h1c,75:h1d,76:h1e,77:h1f,78:h1g,79:h1h,80:h1i,81:h1j,82:h1k,83:h1l,84:h1m,85:h1n,86:h1o,87:h1p,88:h1q,89:h1r,90:h1s,91:h1t,92:h1u,93:h1v,}


def s87(a,b,c):
    m=SH87[c.i]
    return m(a,b,c)


def s88(a,b,c):
    assert c.i in Ek
    return r19(a,b,c)


def s112(a,b,c):
    assert c.i==104
    return h2d(a,b,c)


def s113(a,b,c):
    assert c.i==104
    return h2e(a,b,c)


SH114={2:h2a,10:h2b,19:h2c,101:h2f,}


def s114(a,b,c):
    m=SH114[c.i]
    return m(a,b,c)


def s116(a,b,c):
    assert c.i==95
    return h2g(a,b,c)


def s117(a,b,c):
    assert c.i==101
    return h2h(a,b,c)


SH118={19:h2i,101:h2j,}


def s118(a,b,c):
    m=SH118[c.i]
    return m(a,b,c)


def s119(a,b,c):
    assert c.i==3
    return h2k(a,b,c)


SH121={3:h2l,12:h2m,}


def s121(a,b,c):
    m=SH121[c.i]
    return m(a,b,c)


def s122(a,b,c):
    assert c.i in Eo
    return r1a(a,b,c)


SH123={24:h21,}
SH123.update({v:rb for v in Eo})


def s123(a,b,c):
    m=SH123[c.i]
    return m(a,b,c)


def s124(a,b,c):
    assert c.i==63
    return h2n(a,b,c)


def s125(a,b,c):
    assert c.i==66
    return h2o(a,b,c)


def s126(a,b,c):
    assert c.i==13
    return h2p(a,b,c)


def s127(a,b,c):
    assert c.i==33
    return h2q(a,b,c)


SH128={1:h0,5:h1,8:h2,11:h3,12:h4,14:h2r,21:h5,23:h2s,25:r0,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s128(a,b,c):
    m=SH128[c.i]
    return m(a,b,c)


SH129={1:h1z,5:h1,8:h2,11:h3,12:h2t,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s129(a,b,c):
    m=SH129[c.i]
    return m(a,b,c)


def s130(a,b,c):
    assert c.i==63
    return h2u(a,b,c)


SH131={15:h2v,32:h2w,}


def s131(a,b,c):
    m=SH131[c.i]
    return m(a,b,c)



Es={15,32}
def s132(a,b,c):
    assert c.i in Es
    return r1b(a,b,c)


SH133={1:h1z,8:h2,11:h3,21:h5,69:hw,}

Et={2,3,5,6,10,12,15,18,19,20,22,27,29,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,64,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,101}
SH133.update({v:r1c for v in Et})


def s133(a,b,c):
    m=SH133[c.i]
    return m(a,b,c)


def s135(a,b,c):
    assert c.i in Ep
    return r1d(a,b,c)


def s136(a,b,c):
    assert c.i in Eo
    return r1e(a,b,c)


def s137(a,b,c):
    assert c.i==13
    return h2x(a,b,c)


def s138(a,b,c):
    assert c.i==28
    return h2y(a,b,c)


def s139(a,b,c):
    assert c.i==11
    return h2z(a,b,c)


def s140(a,b,c):
    assert c.i in Eo
    return r1f(a,b,c)


def s141(a,b,c):
    assert c.i==11
    return h30(a,b,c)


def s142(a,b,c):
    assert c.i in Eo
    return r1g(a,b,c)


SH143={1:h1z,5:h1,6:h31,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s143(a,b,c):
    m=SH143[c.i]
    return m(a,b,c)


def s144(a,b,c):
    assert c.i in Eo
    return r1h(a,b,c)


SH145={1:h1z,5:h1,6:h32,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s145(a,b,c):
    m=SH145[c.i]
    return m(a,b,c)


def s146(a,b,c):
    assert c.i in Eo
    return r1i(a,b,c)


def s147(a,b,c):
    assert c.i in Eh
    return r1j(a,b,c)


def s148(a,b,c):
    assert c.i in Eh
    return r1k(a,b,c)


def s149(a,b,c):
    assert c.i in Eh
    return r1l(a,b,c)


def s150(a,b,c):
    assert c.i in Eh
    return r1m(a,b,c)


def s151(a,b,c):
    assert c.i in Ej
    return r1n(a,b,c)


def s152(a,b,c):
    assert c.i in Ej
    return r1o(a,b,c)


def s153(a,b,c):
    assert c.i in Er
    return r1p(a,b,c)


def s154(a,b,c):
    assert c.i in Er
    return r1q(a,b,c)


def s155(a,b,c):
    assert c.i in Ek
    return r1r(a,b,c)


SH156={3:h1w,}
SH156.update({v:r1s for v in Ek})


def s156(a,b,c):
    m=SH156[c.i]
    return m(a,b,c)


SH157={3:h1w,}
SH157.update({v:r1t for v in Ek})


def s157(a,b,c):
    m=SH157[c.i]
    return m(a,b,c)


SH158={3:h1w,}
SH158.update({v:r1u for v in Ek})


def s158(a,b,c):
    m=SH158[c.i]
    return m(a,b,c)


SH159={3:h1w,}
SH159.update({v:r1v for v in Ek})


def s159(a,b,c):
    m=SH159[c.i]
    return m(a,b,c)


SH160={3:h1w,}
SH160.update({v:r1w for v in Ek})


def s160(a,b,c):
    m=SH160[c.i]
    return m(a,b,c)


SH161={3:h1w,}
SH161.update({v:r1x for v in Ek})


def s161(a,b,c):
    m=SH161[c.i]
    return m(a,b,c)


SH162={3:h1w,}
SH162.update({v:r1y for v in Ek})


def s162(a,b,c):
    m=SH162[c.i]
    return m(a,b,c)


SH163={3:h1w,}
SH163.update({v:r1z for v in Ek})


def s163(a,b,c):
    m=SH163[c.i]
    return m(a,b,c)


SH164={3:h1w,}
SH164.update({v:r20 for v in Ek})


def s164(a,b,c):
    m=SH164[c.i]
    return m(a,b,c)


SH165={3:h1w,}
SH165.update({v:r21 for v in Ek})


def s165(a,b,c):
    m=SH165[c.i]
    return m(a,b,c)


SH166={3:h1w,}
SH166.update({v:r22 for v in Ek})


def s166(a,b,c):
    m=SH166[c.i]
    return m(a,b,c)


SH167={3:h1w,}
SH167.update({v:r23 for v in Ek})


def s167(a,b,c):
    m=SH167[c.i]
    return m(a,b,c)


SH168={3:h1w,}
SH168.update({v:r24 for v in Ek})


def s168(a,b,c):
    m=SH168[c.i]
    return m(a,b,c)


SH169={3:h1w,}
SH169.update({v:r25 for v in Ek})


def s169(a,b,c):
    m=SH169[c.i]
    return m(a,b,c)


SH170={3:h1w,}
SH170.update({v:r26 for v in Ek})


def s170(a,b,c):
    m=SH170[c.i]
    return m(a,b,c)


SH171={3:h1w,}
SH171.update({v:r27 for v in Ek})


def s171(a,b,c):
    m=SH171[c.i]
    return m(a,b,c)


SH172={3:h1w,}
SH172.update({v:r28 for v in Ek})


def s172(a,b,c):
    m=SH172[c.i]
    return m(a,b,c)


SH173={3:h1w,}
SH173.update({v:r29 for v in Ek})


def s173(a,b,c):
    m=SH173[c.i]
    return m(a,b,c)


SH174={3:h1w,}
SH174.update({v:r2a for v in Ek})


def s174(a,b,c):
    m=SH174[c.i]
    return m(a,b,c)


SH175={3:h1w,}
SH175.update({v:r2b for v in Ek})


def s175(a,b,c):
    m=SH175[c.i]
    return m(a,b,c)


SH176={3:h1w,}
SH176.update({v:r2c for v in Ek})


def s176(a,b,c):
    m=SH176[c.i]
    return m(a,b,c)


SH177={3:h1w,}
SH177.update({v:r2d for v in Ek})


def s177(a,b,c):
    m=SH177[c.i]
    return m(a,b,c)


def s178(a,b,c):
    assert c.i in El
    return r2e(a,b,c)


SH179={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,100:hz,102:h10,103:h11,105:r0,106:h12,108:h13,109:h14,110:h15,}


def s179(a,b,c):
    m=SH179[c.i]
    return m(a,b,c)


def s181(a,b,c):
    assert c.i==104
    return h33(a,b,c)


def s183(a,b,c):
    assert c.i==63
    return h34(a,b,c)


SH184={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,96:r0,97:r0,98:r0,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s184(a,b,c):
    m=SH184[c.i]
    return m(a,b,c)


def s186(a,b,c):
    assert c.i==104
    return h35(a,b,c)


def s188(a,b,c):
    assert c.i==30
    return h36(a,b,c)


def s189(a,b,c):
    assert c.i==33
    return h37(a,b,c)


def s190(a,b,c):
    assert c.i==12
    return h38(a,b,c)


def s191(a,b,c):
    assert c.i==19
    return h39(a,b,c)


def s192(a,b,c):
    assert c.i in Em
    return r2f(a,b,c)


def s193(a,b,c):
    assert c.i in Em
    return r2g(a,b,c)


def s194(a,b,c):
    assert c.i in Em
    return r2h(a,b,c)


def s195(a,b,c):
    assert c.i in Em
    return r2i(a,b,c)


def s196(a,b,c):
    assert c.i==19
    return h3a(a,b,c)


def s197(a,b,c):
    assert c.i==19
    return h3b(a,b,c)


def s198(a,b,c):
    assert c.i==25
    return h3c(a,b,c)


SH199={1:h1z,5:h1,8:h2,11:h3,21:h5,27:h6,29:h7,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}
SH199.update({v:r2j for v in Em})


def s199(a,b,c):
    m=SH199[c.i]
    return m(a,b,c)


def s201(a,b,c):
    assert c.i in Eo
    return r2k(a,b,c)


def s203(a,b,c):
    assert c.i in Eo
    return r2l(a,b,c)


SH204={1:h1z,5:h1,8:h2,11:h3,18:h3d,21:h5,27:h6,29:h7,32:h3e,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,64:hu,69:hw,70:hx,}


def s204(a,b,c):
    m=SH204[c.i]
    return m(a,b,c)


def s205(a,b,c):
    assert c.i in Eo
    return r2m(a,b,c)


def s206(a,b,c):
    assert c.i in Eo
    return r2n(a,b,c)


def s207(a,b,c):
    assert c.i in Eo
    return r2o(a,b,c)


def s208(a,b,c):
    assert c.i in Eo
    return r2p(a,b,c)


def s209(a,b,c):
    assert c.i in Eo
    return r2q(a,b,c)


def s210(a,b,c):
    assert c.i in Eo
    return r2r(a,b,c)


def s211(a,b,c):
    assert c.i==105
    return h3f(a,b,c)


def s212(a,b,c):
    assert c.i==105
    return h3g(a,b,c)


SH214={2:h2a,3:h1w,10:h2b,19:h2c,}


def s214(a,b,c):
    m=SH214[c.i]
    return m(a,b,c)


SH215={19:h3h,}

Eu={2,10,101}
SH215.update({v:r2f for v in Eu})


def s215(a,b,c):
    m=SH215[c.i]
    return m(a,b,c)


SH216={96:h3i,97:h3j,98:h3k,}


def s216(a,b,c):
    m=SH216[c.i]
    return m(a,b,c)


SH217={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,107:h3l,}


def s217(a,b,c):
    m=SH217[c.i]
    return m(a,b,c)



Ev={1,5,8,11,12,21,27,29,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,62,64,65,69,70,107}
def s218(a,b,c):
    assert c.i in Ev
    return r2s(a,b,c)


def s219(a,b,c):
    assert c.i==3
    return h3m(a,b,c)


SH220={3:r2t,31:h3n,}


def s220(a,b,c):
    m=SH220[c.i]
    return m(a,b,c)


SH222={3:h1w,19:h3o,}


def s222(a,b,c):
    m=SH222[c.i]
    return m(a,b,c)


SH224={3:r2i,}
SH224.update({v:r2u for v in Ek})


def s224(a,b,c):
    m=SH224[c.i]
    return m(a,b,c)


def s225(a,b,c):
    assert c.i==19
    return h3p(a,b,c)


def s226(a,b,c):
    assert c.i==13
    return h3q(a,b,c)


def s227(a,b,c):
    assert c.i==25
    return h3r(a,b,c)


def s228(a,b,c):
    assert c.i==25
    return h3s(a,b,c)


def s229(a,b,c):
    assert c.i in Eo
    return r2v(a,b,c)


SH230={3:h1w,19:h3t,}


def s230(a,b,c):
    m=SH230[c.i]
    return m(a,b,c)


def s231(a,b,c):
    assert c.i in Es
    return r2w(a,b,c)


def s232(a,b,c):
    assert c.i in Eo
    return r2x(a,b,c)


def s234(a,b,c):
    assert c.i in Ek
    return r2y(a,b,c)


def s235(a,b,c):
    assert c.i in Ek
    return r2z(a,b,c)


def s236(a,b,c):
    assert c.i==105
    return h3u(a,b,c)


def s237(a,b,c):
    assert c.i==104
    return h3v(a,b,c)


def s238(a,b,c):
    assert c.i==104
    return h3w(a,b,c)


SH239={96:h3i,97:h3x,98:h3y,}


def s239(a,b,c):
    m=SH239[c.i]
    return m(a,b,c)


SH240={1:h0,5:h1,8:h2,11:h3,12:h4,21:h5,27:h6,29:h7,30:h8,34:h9,35:ha,36:hb,37:hc,38:hd,39:he,40:hf,41:hg,42:hh,43:hi,44:hj,45:hk,46:hl,47:hm,48:hn,49:ho,50:hp,51:hq,60:hr,61:hs,62:ht,64:hu,65:hv,69:hw,70:hx,94:hy,98:r0,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}


def s240(a,b,c):
    m=SH240[c.i]
    return m(a,b,c)


def s241(a,b,c):
    assert c.i in Ek
    return r30(a,b,c)



Ew={96,97,98}
def s242(a,b,c):
    assert c.i in Ew
    return r31(a,b,c)


def s244(a,b,c):
    assert c.i in Ev
    return r32(a,b,c)


def s245(a,b,c):
    assert c.i in Ek
    return r33(a,b,c)


SH246={1:h0,8:h2,11:h3,21:h5,69:hw,94:hy,100:hz,102:h10,103:h11,106:h12,108:h13,109:h14,110:h15,}

Ex={5,12,27,29,30,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,60,61,62,64,65,70,107}
SH246.update({v:r0 for v in Ex})


def s246(a,b,c):
    m=SH246[c.i]
    return m(a,b,c)


SH247={3:r34,31:h3n,}


def s247(a,b,c):
    m=SH247[c.i]
    return m(a,b,c)



Ey={3,31}
def s248(a,b,c):
    assert c.i in Ey
    return r35(a,b,c)


def s250(a,b,c):
    assert c.i==105
    return h3z(a,b,c)


def s251(a,b,c):
    assert c.i==104
    return h40(a,b,c)


def s252(a,b,c):
    assert c.i==33
    return h41(a,b,c)


def s253(a,b,c):
    assert c.i==13
    return h42(a,b,c)


SH254={3:h43,30:h44,}


def s254(a,b,c):
    m=SH254[c.i]
    return m(a,b,c)


def s255(a,b,c):
    assert c.i in Eo
    return r36(a,b,c)


def s256(a,b,c):
    assert c.i in Eo
    return r37(a,b,c)


def s257(a,b,c):
    assert c.i==13
    return h45(a,b,c)


SH258={18:h46,32:h47,}


def s258(a,b,c):
    m=SH258[c.i]
    return m(a,b,c)


def s259(a,b,c):
    assert c.i in Ek
    return r38(a,b,c)


def s262(a,b,c):
    assert c.i in Ew
    return r39(a,b,c)


def s264(a,b,c):
    assert c.i in Ek
    return r3a(a,b,c)


def s265(a,b,c):
    assert c.i==98
    return h48(a,b,c)


def s266(a,b,c):
    assert c.i==95
    return h49(a,b,c)


def s267(a,b,c):
    assert c.i in Ev
    return r3b(a,b,c)


def s268(a,b,c):
    assert c.i in Ey
    return r3c(a,b,c)


def s269(a,b,c):
    assert c.i in Ey
    return r3d(a,b,c)


def s270(a,b,c):
    assert c.i in Ek
    return r3e(a,b,c)


def s272(a,b,c):
    assert c.i in Ek
    return r3f(a,b,c)


SH273={3:h4a,30:h4b,}


def s273(a,b,c):
    m=SH273[c.i]
    return m(a,b,c)


def s274(a,b,c):
    assert c.i==30
    return h4c(a,b,c)


def s276(a,b,c):
    assert c.i in Em
    return r3g(a,b,c)


def s277(a,b,c):
    assert c.i in Eo
    return r3h(a,b,c)


def s279(a,b,c):
    assert c.i==105
    return h4d(a,b,c)


def s280(a,b,c):
    assert c.i==105
    return h4e(a,b,c)


def s281(a,b,c):
    assert c.i==98
    return h4f(a,b,c)


def s282(a,b,c):
    assert c.i in Ek
    return r3i(a,b,c)


def s284(a,b,c):
    assert c.i==105
    return h4g(a,b,c)


def s285(a,b,c):
    assert c.i==30
    return h4h(a,b,c)


def s288(a,b,c):
    assert c.i==33
    return h4i(a,b,c)


def s289(a,b,c):
    assert c.i==32
    return h4j(a,b,c)


def s290(a,b,c):
    assert c.i in Ek
    return r3j(a,b,c)


def s291(a,b,c):
    assert c.i in Ek
    return r3k(a,b,c)


def s292(a,b,c):
    assert c.i in Ek
    return r3l(a,b,c)


def s293(a,b,c):
    assert c.i in Ew
    return r3m(a,b,c)


def s294(a,b,c):
    assert c.i in Ek
    return r3n(a,b,c)


def s296(a,b,c):
    assert c.i==33
    return h4k(a,b,c)


def s297(a,b,c):
    assert c.i==33
    return h4l(a,b,c)


def s298(a,b,c):
    assert c.i in Ek
    return r3o(a,b,c)


def s299(a,b,c):
    assert c.i in Eo
    return r3p(a,b,c)


def s300(a,b,c):
    assert c.i==33
    return h4m(a,b,c)


def s301(a,b,c):
    assert c.i in Ek
    return r3q(a,b,c)


def s302(a,b,c):
    assert c.i in Ek
    return r3r(a,b,c)


def s303(a,b,c):
    assert c.i in Ek
    return r3s(a,b,c)


R0={0:(2,s2),9:(112,s112),10:(113,s113),12:(116,s116),24:(124,s124),25:(125,s125),26:(126,s126),27:(127,s127),45:(130,s130),67:(137,s137),68:(138,s138),115:(183,s183),120:(189,s189),128:(198,s198),179:(211,s211),180:(212,s212),184:(216,s216),213:(236,s236),221:(250,s250),223:(252,s252),240:(265,s265),243:(266,s266),246:(267,s267),260:(279,s279),261:(280,s280),263:(281,s281),271:(284,s284),275:(288,s288),283:(293,s293),286:(296,s296),287:(297,s297),295:(300,s300),}
R1={89:(156,s156),90:(157,s157),91:(158,s158),92:(159,s159),93:(160,s160),94:(161,s161),95:(162,s162),96:(163,s163),97:(164,s164),98:(165,s165),99:(166,s166),100:(167,s167),101:(168,s168),102:(169,s169),103:(170,s170),104:(171,s171),105:(172,s172),106:(173,s173),107:(174,s174),108:(175,s175),109:(176,s176),110:(177,s177),182:(214,s214),187:(222,s222),200:(230,s230),}
R1.update({v:(8,s8) for v in E5})
R2={11:(114,s114),13:(117,s117),14:(118,s118),15:(119,s119),16:(121,s121),111:(178,s178),185:(220,s220),217:(220,s220),249:(269,s269),}

Ez={0,3,9,10,12,24,25,26,27,45,67,68,77,83,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,115,120,128,179,180,182,184,187,200,213,221,223,240,243,246,260,261,263,271,275,283,286,287,295}
R2.update({v:(17,s17) for v in Ez})
R3={47:(133,s133),71:(143,s143),72:(145,s145),129:(199,s199),134:(204,s204),}
R3.update({v:(23,s23) for v in E6})
R4={23:(122,s122),46:(132,s132),133:(122,s122),143:(122,s122),145:(122,s122),199:(122,s122),202:(231,s231),204:(122,s122),233:(258,s258),278:(289,s289),}

E10={0,3,9,10,11,12,13,14,15,16,24,25,26,27,45,47,67,68,71,72,77,83,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,115,120,128,129,134,179,180,182,184,185,187,200,213,217,221,223,240,243,246,249,260,261,263,271,275,283,286,287,295}
R4.update({v:(29,s29) for v in E10})
R5={77:(152,s152),}

E11={0,3,9,10,12,24,25,26,27,45,67,68,115,120,128,179,180,184,213,221,223,240,243,246,260,261,263,271,275,283,286,287,295}
R5.update({v:(5,s5) for v in E11})
R6={83:(154,s154),}

E12={0,3,9,10,12,24,25,26,27,45,67,68,77,115,120,128,179,180,184,213,221,223,240,243,246,260,261,263,271,275,283,286,287,295}
R6.update({v:(6,s6) for v in E12})
R7={3:(73,s73),}
R7.update({v:(4,s4) for v in E1})
R8={74:(147,s147),114:(181,s181),214:(237,s237),}
R9={5:(76,s76),75:(151,s151),}
Ra={6:(82,s82),81:(153,s153),}
Rb={7:(88,s88),87:(155,s155),}
Rc={185:(218,s218),217:(244,s244),}
Rd={220:(248,s248),247:(268,s268),}
Re={216:(242,s242),239:(262,s262),}

def parse(lexical_iterator: ms_parser.lexical.LexicalBase):
    a = [0]
    b = []

    action = s0
    c = lexical_iterator.lex()
    next_terminal = False
    try:
        while action:
            if next_terminal is True:
                c = lexical_iterator.lex()
            action, next_terminal = action(a, b, c)
    except KeyError as e:
        next_terminal_list = []
        for _ in range(10):
            if c.is_end:
                break
            next_terminal_list.append(c.v)
            c = lexical_iterator.lex()
        next_terminal_text = "".join(next_terminal_list)
        raise KeyError("解析失败:", next_terminal_text) from e

    return b[0]
